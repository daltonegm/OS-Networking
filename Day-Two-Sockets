upserspace scoets
stream
datagram

kernal space sockets
require privesc

user space common applications/sockets
netcat
nmap
tcpdumo


if the tool isnt isstalled, you can use something like the tcp binary to send out connections


kernal level common sockets
capturing on wire tcpdump or wireshark
nmap for os identification
netcat on the wellknown ports
scapy for crating modifications


python terminologies
modules-
functions, exceptions, contstants, objects, types

importing the right ipv4 vs ipv6 socket



echo "I got your message" | nc -l -p 54321



#creating a ipv4 stream socket


#importing the socket to get the fucntions
import socket

#creating a socket with the specified address family & ip/port pair
ipaddr = '127.0.0.1'
port = 54321
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

#creating something to reach out to that port and ip
s.connect((ipaddr, port))

#the initial connection just makes the connection, doesnt pass information
#to send a string as a bytes like onject, add the prefix 'b' to the string. \n is used to go to the next line
#sending out a byte sized object
s.send(b'Hello\n')


#for th buffer size it is recomended to be a power of 2 when usuing recvfrom(also not too large)
#setting aside space for the response
response, con = s.recvfrom(1024)


# In order to receive a message that is sent as a bytes-like-object you must decode into utf-8

print(response.decode())

s.close()



raw ipv4 sockets

testing IDS
avoiding IDS
obfuscating






raw tcp socket


#for buidling the socket
import socket

#for buidling system level commands
import sys

import array

#for establishing the packet structure(used later)
from struct import *

#Create the raw socket(and have error handling)
try:
    s=socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
except socket.error as msg:
    print(msg)
    sys.exit()

packet = ''

src_ip = "10.1.0.2"
dst_ip = "10.3.0.2"

#Create the IPv4 Header info

#putting the decimal conversion of the hex value 0x45 for version and internet header length(Byte 0)
ip_ver_ihl=69

#combination of DSCP and ECN fields(Byte 1)
ip_tos=0

#The kernal will fill in the actual length of the packet
ip_len=0

#this iset the IP identiciation of the packet
ip_id=12345

#this sets the fragmentation to off
ip_frag=0

#this sets the TTL of the packet
ip_ttl=64

#this sets the ip protocol to 16 (chaos). If I wanted TCP (6) or UDP (17)
ip_proto=6

#The kernal will fill in the checksum
ip_check=0

#this string(inet_anton) will convert the IP address to a 32 bit binary number
ip_scradd=socket.inet_aton(src_ip)
ip_dstadd=socket.inet_aton(dst_ip)

#Now we have to combine all the fields

ip_header=pack('!BBHHHBBH4s4s' , ip_ver_ihl, ip_tos, ip_len, ip_id, ip_frag, ip_ttl, ip_proto, ip_check, ip_scradd, ip_dstadd)


#TCP header fields
tcp_src=54321
tcp_dst=7777
tcp_seq=454
tcp_ack_seq=0 #TCP ack sequence number
tcp_data_off=5 #data offset specifiying the size of the tcp header multiplied by 4(which is 20)
tcp_reserve=0  #the 3 reserve bits + ns flag in reserve field
tcp_flags=0 #tcp flags field before the bits are turned on
tcp_win=65535 #maximum allowed window size reordered to network order
tcp_chk=0 #tcp checksum which will be calculated later on
tcp_urg_ptr=0 #urgent pointer only if URG flag is set

#combine the left shited4 bit TCP offset and the reserve field
#we have to combine fileds that dont equal a byte

tcp_off_res=(tcp_data_off<<4)+tcp_reserve

#TCP flags by bit starting from right to left
tcp_fin=0 #fin flga
tcp_syn=1 #sync flag
tcp_rst=0 #reset
tcp_psh=0 #push
tcp_ack=0 #ack
tcp_urg=0 #urgent
tcp_ece=0 #Explicit congestion notification echo
tcp_cwr=0 #congestion window reduced

#combine the tcp flag by left shifiting the bit locations and adding the bits
tcp_flags=tcp_fin+(tcp_syn<<1)+(tcp_rst<<2)+(tcp_psh<<3)+(tcp_ack<<4)+(tcp_urg<<5)+(tcp_ece<<6)+(tcp_cwr<<7)

#the ! in the pack format string measn network order
tcp_hdr = pack('!HHLLBBHHH', tcp_src, tcp_dst, tcp_seq, tcp_ack_seq, tcp_off_res, tcp_flags, tcp_win, tcp_chk, tcp_urg_ptr)

user_data=b'Hello! is this hidden?'

#message=b'This is where message goes!!'
#packet=ip_header+message

#pseudo header fields
src_address=socket.inet_aton(src_ip)
dst_address=socket.inet_aton(dst_ip)
reserved=0
protocol=socket.IPPROTO_TCP
tcp_length=len(tcp_hdr)+len(user_data)

#pack the pseudo header
ps_hdr=pack('!4s4sBBH', src_address, dst_address, reserved, protocol, tcp_length)
ps_hdr=ps_hdr+tcp_hdr+user_data

#that first part just makes sure that it is even
def checksum(data):
    if len(data) % 2 != 0:
        data += b'\0'
    res=sum(array.array("H",data))
    res=(res>>16)+(res & 0xffff)
    res+=res>>16
    return(~res) & 0xffff
tcp_chk=checksum(ps_hdr)

#Now we can pack the tcp header to fill the correct checksum(**checksum NOT in network byte order)

tcp_hdr = pack('!HHLLBBH', tcp_src, tcp_dst, tcp_seq, tcp_ack_seq, tcp_off_res, tcp_flags, tcp_win) + pack('H', tcp_chk) + pack('!H', tcp_urg_ptr)


packet = ip_header + tcp_hdr+ user_data


s.sendto(packet, (dst_ip, 0))

