practice CTFC

main CTFD

miro

vpn for after hours

BRMC-004-M

draw IO

resources

terminator

jump box->notification on CTFD

ssh student@10.50.27.150 -X
(in notifications on CTFD)

Bits/nibbles/byte/halfword/word

binary base 2
decimal base 10

binary conversions
when you send packets across the wire, you send a 0, its 4 zeros
2 bit chartacter, 2bits that is the start, the actual message will need to be bit shifted..moving the binary over 

if I had a 1 in binary, and I bit shift to the left what does it become?(2)
if i bit shift twice what does it become?(4)

encapsualtion and decapsulation

osi model

Layer One
Physical
primary hardware, actually sends the data


Layer two
LLC logical link control
switch interracts with the router

0x is Hex values
0x0800 is ipv4

VLAN
virtual local area network, done at layer protocols

arp header


OCI layer 3 
IP

DSCP or ECN
DSCP value of one, I have to bit shift 

bit 15 
ecn in thw two fields on the right
if I have this bit turned on(DSCP value of 1, whihc is a 

how to read offset
version is byte offset 1
protocol  (8+1)
flags(single bit, on or off)
fragmentation(over the max MTU)
1480 not 1500 to account for the header
can we slip a packet in this? yes
when you get ot the final packet, the MF bit is not on

ipv6
flow label
they got rid of fragmentation, there is not a set packet size set with ipv6
it uses flow instead, with a hop limit
hope limit is a rename of TTL

fingerprinting
defauly windows or linux TTL
how long does a packet take to get around the world (20 ish)


ICMP headers/traffic
ping
taking advantage of the TTL we can traceroute



layer 4 transport protocl
all the secure tools we use, use TCP, soure and destinator port
TCP flags


layer 5 sesion layer
maintain connections

SMB
used with sharedrives
so a linux can talk to windows, SAMBA

RPC sends out resquests and response(depends on the application)



layer 6 presentation layer
formatting
file extensions

ftp passive
it will never reach out to you, it will only respond to queries

ssh
uses a client server authentication
whats a server(ssh server has to be running on who you are ssh'ing to )
what does that look like from a netowrking perspective
if the service isnt running why would I have it running

when we are tunneling, we are sending out traffic thru another device
if we change how we connect to the device, it will see your credentials change(flush known keys)

telnet 
unsecure

wireshark TCP settings relative

!(ssh)
esporting packets

tcpdump
-x convert and display ascii, two XX's
you want to look at the eth header 2 xs
v for verbose, VV very verbose


Berkley Packet Filters (BPF)
Using BPFs with operators, bitmasking, and TCPDump creates a powerful tool for traffic filtering and parsing.

tcpdump {A} [B:C] {D} {E} {F} {G}

A = Protocol (ether | arp | ip | ip6 | icmp | tcp | udp)
B = Header Byte offset
C = optional: Byte Length. Can be 1, 2 or 4 (default 1)
D = optional: Bitwise mask (&)
E = Operator (= | == | > | < | <= | >= | != | () | << | >>)
F = Result of Expresion
G = optional: Logical Operator (&& ||) to bridge expressions
Example:
tcpdump 'ether[12:2] = 0x0800 && (tcp[2:2] != 22 && tcp[2:2] != 23)'

ip[0] & 0x0F > 0x05


layer 2 switching technolgoies
double tag

layer 2 discovery protocols


layer 3 routing tables
routing tables
routing vs routed
first hop redundancy protocols
administrative distance
stattic/dynamic routing


filter for any packaet with a fin flag set
sudo tcpdump "tcp[13] & 0x01 = 0x01"
only fin flag and the fin has to be on
byte offset 13, first bit(flag bit), flag is on(value of 1)

sudo tcpdump "tcp[0:2]
starting at 0 go two bytes

scapy

>>> a=Ether()
>>> a.show()
WARNING: Mac address to reach destination not found. Using broadcast.
###[ Ethernet ]### 
  dst       = ff:ff:ff:ff:ff:ff
  src       = fa:16:3e:6f:0c:1b
  type      = 0x9000

>>> a.type=0x0806
>>> a.show()
WARNING: Mac address to reach destination not found. Using broadcast.
###[ Ethernet ]### 
  dst       = ff:ff:ff:ff:ff:ff
  src       = fa:16:3e:6f:0c:1b
  type      = ARP

>>> 
>>> b=ARP()
>>> b.show()
###[ ARP ]### 
  hwtype    = 0x1
  ptype     = IPv4
  hwlen     = None
  plen      = None
  op        = who-has
  hwsrc     = fa:16:3e:6f:0c:1b
  psrc      = 10.10.0.40
  hwdst     = 00:00:00:00:00:00
  pdst      = 0.0.0.0

>>> sendp(a/b, iface="eth0")
.
Sent 1 packets.



